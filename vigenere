#Chiffrement sans le code de César

def chiffre_vigenere(message, cle):  #Premier Essai Code Vigenère
    #Créer le tableau. Chaque case du tableau = la lettre utilisée pour chiffrer une autre lettre.
    tableau = []
    for i in range(26) : #les lignes du tableau = les lettres de la clé
        tableau.append([])
        for j in range(26): #les colonnes du tableau = les lettres du message
            tableau[i].append(chr((i+j) % 26 + 65)) #Calcule l'indice de la lettre chiffrée (indice entre 0 et 25, 65 = A en ASCII)

    #Initialiser le texte chiffré
    chiffre = "" #variable qui stockera le message chiffré

    #Chiffrer le message
    for i in range(len(message)):
        lettre_message = message[i]
        lettre_cle = cle[i % len(cle)]
        ligne = ord(lettre_cle.upper()) - 65
        colonne = ord(lettre_message.upper()) - 65
        chiffre += tableau[ligne][colonne]

    return chiffre



def vigenere(message, key): #Deuxième Essai Code Vigenère
    #tableau de substitution : i=indice de la ligne et représente lettre clé, j=indice colonne et représente lettre du message à chiffrer/déchiffrer, i+j % 26 = calcul du décalage entre la lettre clé et lettre msg modulo 26, +65 = pour obtenir la valeur ASCII

    tableau = []
    for i in range(26):
        tableau.append([])
        for j in range(26):
            tableau[i].append(chr((i+j) % 26 + 65))

    # Initialiser le texte chiffré
    chiffre = ""

    # Chiffrer le message
    for i in range(len(message)):
        lettre_message = message[i]
        if i < len(key):
            lettre_cle = key[i]
        else:
            lettre_cle = key[i % len(key)]
        ligne = ord(lettre_cle.upper()) - 65   #convertit lettre_cle en nombre qui représente sa position dans l’alphabet
        colonne = ord(lettre_message.upper()) - 65   #même chose pour lettre_message
        chiffre += tableau[ligne][colonne]    #accès à la table et index de la lettre + ajout de la lettre à la variable ‘’chiffre’’

    return chiffre
